# -*- coding: utf-8 -*-
"""Clusterize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wxPN8wUtZPntTknM97web7Ep2xUnqQWH
"""

import numpy as np
import matplotlib.pyplot as plt

# Given examples
examples = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])

# Initial seeds
initial_seeds = np.array([[2, 10], [5, 8], [1, 2]])

# Number of clusters
num_clusters = len(initial_seeds)

# Number of examples
num_examples = len(examples)

# Number of dimensions
num_dimensions = examples.shape[1]

# Maximum number of iterations (epochs)
max_iterations = 1

# Perform k-means clustering
for epoch in range(max_iterations):
    # Calculate Euclidean distances
    distances = np.zeros((num_examples, num_clusters))
    for i in range(num_clusters):
        distances[:, i] = np.linalg.norm(examples - initial_seeds[i], axis=1)

    # Assign examples to clusters based on minimum distance
    clusters = np.argmin(distances, axis=1)

    # Update centroids
    new_centroids = np.array([examples[clusters == k].mean(axis=0) for k in range(num_clusters)])

    # Update initial seeds
    initial_seeds = new_centroids

# Visualize the results
plt.figure(figsize=(10, 10))
for k in range(num_clusters):
    cluster_points = examples[clusters == k]
    plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f'Cluster {k + 1}')

plt.scatter(initial_seeds[:, 0], initial_seeds[:, 1], marker='X', c='black', s=200, label='Centroids')
plt.title('K-Means Clustering (First Epoch)')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.grid(True)
plt.show()